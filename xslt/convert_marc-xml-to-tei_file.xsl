<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet exclude-result-prefixes="#all" version="3.0" xmlns="http://www.tei-c.org/ns/1.0" xmlns:marc="http://www.loc.gov/MARC21/slim" xmlns:oape="https://openarabicpe.github.io/ns"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:tei="http://www.tei-c.org/ns/1.0" xmlns:xd="http://www.oxygenxml.com/ns/doc/xsl" xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xpath-default-namespace="http://www.tei-c.org/ns/1.0">
    <!-- This stylesheet takes MARC21 records in XML serialisation as input and generates TEI XML as output -->
    <!-- documentation of the MARC21 field codes can be found here: https://marc21.ca/M21/MARC-Field-Codes.html -->
    <xsl:import href="convert_marc-xml-to-tei_functions.xsl"/>
    <!-- output: everything is wrapped in a listBibl -->
    <xsl:template match="/">
        <xsl:choose>
            <xsl:when test="$p_stand-alone = true()">
                <xsl:message>
                    <xsl:text>Output: stand-alone TEI/XML file</xsl:text>
                </xsl:message>
                <xsl:result-document href="{$p_output-folder}{$v_file-name_input}.TEIP5.xml" method="xml">
                    <TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:tei="http://www.tei-c.org/ns/1.0">
                        <teiHeader xml:lang="en">
                            <fileDesc>
                                <titleStmt>
                                    <title>Bibliographic data converted from MARCXML to TEI</title>
                                    <xsl:copy-of select="$p_editor"/>
                                </titleStmt>
                                <publicationStmt>
                                    <p>This file is, yet, unpublished</p>
                                </publicationStmt>
                                <sourceDesc>
                                    <p>This file is a born-digital file and was generated by automatic conversion from the MARCXML file <ref target="{base-uri()}"><xsl:value-of
                                        select="$v_file-name_input"/></ref>.</p>
                                </sourceDesc>
                            </fileDesc>
                            <revisionDesc>
                                <change when="{$p_today-iso}" who="{$p_id-editor}">Created this file through automated conversion from MARCXML</change>
                            </revisionDesc>
                        </teiHeader>
                        <tei:standOff>
                            <!-- <listBibl>
                                <xsl:apply-templates mode="m_marc-to-tei" select="descendant::marc:record"/>
                            </listBibl>-->
                            <!-- list of holding organisations -->
                            <listOrg>
                                <!-- get IDs  -->
                                <xsl:for-each select="descendant::marc:record">
                                    <xsl:variable name="v_id-record">
                                        <xsl:apply-templates select="marc:datafield[@tag = ('016')][@ind1 = '7']/marc:subfield[@code = 'a']"/>
                                    </xsl:variable>
                                    <!-- trying to make sure that the files are present before running on them -->
                                    <xsl:variable name="v_record-location" select="oape:get-marcx($v_id-record, 'test')"/>
                                    <xsl:if test="$v_record-location = 'remote'">
                                        <xsl:variable name="v_id-zdb" select="$v_id-record/descendant-or-self::tei:idno[@type = 'zdb']"/>
                                        <xsl:variable name="v_file-name_marc-plus" select="concat($v_id-zdb, '.plus-1.mrcx')"/>
                                        <xsl:variable name="v_path_marc-plus_local" select="concat($p_output-folder, $v_file-name_marc-plus)"/>
                                        <xsl:result-document href="{$v_path_marc-plus_local}" method="xml">
                                            <xsl:copy-of select="oape:get-marcx($v_id-record, 'save')"/>
                                        </xsl:result-document>
                                    </xsl:if>
                                </xsl:for-each>
                                <!--<xsl:variable name="v_holding-institutions">
                                    <xsl:apply-templates mode="m_get-holding-institutions" select="descendant::marc:record"/>
                                </xsl:variable>
                                <xsl:for-each-group group-by="." select="$v_holding-institutions/descendant-or-self::tei:idno[@type = 'isil']">
                                    <xsl:message>
                                        <xsl:text>Processing </xsl:text>
                                        <xsl:value-of select="$v_holding-institutions/descendant-or-self::tei:idno[@type = 'isil']"/>
                                    </xsl:message>
                                    <xsl:apply-templates mode="m_isil-to-tei" select="."/>
                                </xsl:for-each-group>-->
                            </listOrg>
                            <!-- list of people mentioned -->
                            <listPerson>
                                <xsl:variable name="v_people">
                                    <xsl:apply-templates mode="m_get-people" select="descendant::marc:record"/>
                                </xsl:variable>
                                <xsl:for-each-group group-by="tei:persName[1]" select="$v_people/tei:person">
                                    <xsl:copy-of select="."/>
                                </xsl:for-each-group>
                            </listPerson>
                        </tei:standOff>
                    </TEI>
                </xsl:result-document>
            </xsl:when>
            <xsl:when test="$p_stand-alone = false()">
                <xsl:message>
                    <xsl:text>Output: TEI/XML fragments</xsl:text>
                </xsl:message>
                <!-- save individual files for each record -->
                <xsl:for-each select="descendant::marc:record">
                    <xsl:variable name="v_id-record">
                        <xsl:copy-of select="oape:query-marcx(., 'id')"/>
                    </xsl:variable>
                    <xsl:variable name="v_file-path_output" select="concat($p_output-folder, $v_id-record/tei:idno[1], '.TEIP5.xml')"/>
                    <xsl:choose>
                        <!-- somehow this test does not work -->
                        <xsl:when test="doc-available($v_file-path_output) = true()">
                            <xsl:message terminate="no">
                                <xsl:text>Output file </xsl:text>
                                <xsl:value-of select="$v_file-path_output"/>
                                <xsl:text> already exists.</xsl:text>
                            </xsl:message>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:result-document href="{$v_file-path_output}" method="xml">
                                <xsl:apply-templates mode="m_marc-to-tei" select="."/>
                            </xsl:result-document>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:when>
            <!--<xsl:when test="$p_stand-alone = false()">
                <xsl:result-document href="{$p_output-folder}{$v_file-name_input}.TEIP5.xml" method="xml">
                    <xsl:choose>
                        <xsl:when test="count(descendant::marc:record) > 1">
                            <xsl:element name="listBibl">
                                <xsl:apply-templates mode="m_marc-to-tei" select="descendant::marc:record"/>
                            </xsl:element>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:apply-templates mode="m_marc-to-tei" select="descendant::marc:record"/>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:result-document>
            </xsl:when>-->
        </xsl:choose>
    </xsl:template>
</xsl:stylesheet>
